// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: fmGrpc/fm_bot.proto

package fmGrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BotServiceClient is the client API for BotService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BotServiceClient interface {
	// 定义函数 Function1，Go服务端处理，Python客户端调用
	BotCreate(ctx context.Context, in *BotCreateRequest, opts ...grpc.CallOption) (*BotCreateReply, error)
	// 定义函数 Function2，Python服务端处理，Go客户端调用
	TokenVerify(ctx context.Context, in *TokenVerifyRequest, opts ...grpc.CallOption) (*TokenVerifyReply, error)
}

type botServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBotServiceClient(cc grpc.ClientConnInterface) BotServiceClient {
	return &botServiceClient{cc}
}

func (c *botServiceClient) BotCreate(ctx context.Context, in *BotCreateRequest, opts ...grpc.CallOption) (*BotCreateReply, error) {
	out := new(BotCreateReply)
	err := c.cc.Invoke(ctx, "/fmGrpc.BotService/BotCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) TokenVerify(ctx context.Context, in *TokenVerifyRequest, opts ...grpc.CallOption) (*TokenVerifyReply, error) {
	out := new(TokenVerifyReply)
	err := c.cc.Invoke(ctx, "/fmGrpc.BotService/TokenVerify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BotServiceServer is the server API for BotService service.
// All implementations must embed UnimplementedBotServiceServer
// for forward compatibility
type BotServiceServer interface {
	// 定义函数 Function1，Go服务端处理，Python客户端调用
	BotCreate(context.Context, *BotCreateRequest) (*BotCreateReply, error)
	// 定义函数 Function2，Python服务端处理，Go客户端调用
	TokenVerify(context.Context, *TokenVerifyRequest) (*TokenVerifyReply, error)
	mustEmbedUnimplementedBotServiceServer()
}

// UnimplementedBotServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBotServiceServer struct {
}

func (UnimplementedBotServiceServer) BotCreate(context.Context, *BotCreateRequest) (*BotCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BotCreate not implemented")
}
func (UnimplementedBotServiceServer) TokenVerify(context.Context, *TokenVerifyRequest) (*TokenVerifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenVerify not implemented")
}
func (UnimplementedBotServiceServer) mustEmbedUnimplementedBotServiceServer() {}

// UnsafeBotServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BotServiceServer will
// result in compilation errors.
type UnsafeBotServiceServer interface {
	mustEmbedUnimplementedBotServiceServer()
}

func RegisterBotServiceServer(s grpc.ServiceRegistrar, srv BotServiceServer) {
	s.RegisterService(&BotService_ServiceDesc, srv)
}

func _BotService_BotCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BotCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).BotCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmGrpc.BotService/BotCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).BotCreate(ctx, req.(*BotCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_TokenVerify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).TokenVerify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fmGrpc.BotService/TokenVerify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).TokenVerify(ctx, req.(*TokenVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BotService_ServiceDesc is the grpc.ServiceDesc for BotService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BotService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fmGrpc.BotService",
	HandlerType: (*BotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BotCreate",
			Handler:    _BotService_BotCreate_Handler,
		},
		{
			MethodName: "TokenVerify",
			Handler:    _BotService_TokenVerify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fmGrpc/fm_bot.proto",
}
